// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TriviaGameFormat.pb.h"

@implementation TriviaGameFormatRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TriviaGameFormatRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [TriviaRoundFormatRoot registerAllExtensions:registry];
    [TriviaQuestionFormatRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface OngoingGameProto ()
@property (retain) GameResultsProto* gameSoFar;
@property (retain) UnfinishedRoundProto* myNewRound;
@end

@implementation OngoingGameProto

- (BOOL) hasGameSoFar {
  return !!hasGameSoFar_;
}
- (void) setHasGameSoFar:(BOOL) value {
  hasGameSoFar_ = !!value;
}
@synthesize gameSoFar;
- (BOOL) hasMyNewRound {
  return !!hasMyNewRound_;
}
- (void) setHasMyNewRound:(BOOL) value {
  hasMyNewRound_ = !!value;
}
@synthesize myNewRound;
- (void) dealloc {
  self.gameSoFar = nil;
  self.myNewRound = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameSoFar = [GameResultsProto defaultInstance];
    self.myNewRound = [UnfinishedRoundProto defaultInstance];
  }
  return self;
}
static OngoingGameProto* defaultOngoingGameProtoInstance = nil;
+ (void) initialize {
  if (self == [OngoingGameProto class]) {
    defaultOngoingGameProtoInstance = [[OngoingGameProto alloc] init];
  }
}
+ (OngoingGameProto*) defaultInstance {
  return defaultOngoingGameProtoInstance;
}
- (OngoingGameProto*) defaultInstance {
  return defaultOngoingGameProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameSoFar) {
    [output writeMessage:1 value:self.gameSoFar];
  }
  if (self.hasMyNewRound) {
    [output writeMessage:2 value:self.myNewRound];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasGameSoFar) {
    size += computeMessageSize(1, self.gameSoFar);
  }
  if (self.hasMyNewRound) {
    size += computeMessageSize(2, self.myNewRound);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (OngoingGameProto*) parseFromData:(NSData*) data {
  return (OngoingGameProto*)[[[OngoingGameProto builder] mergeFromData:data] build];
}
+ (OngoingGameProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OngoingGameProto*)[[[OngoingGameProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OngoingGameProto*) parseFromInputStream:(NSInputStream*) input {
  return (OngoingGameProto*)[[[OngoingGameProto builder] mergeFromInputStream:input] build];
}
+ (OngoingGameProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OngoingGameProto*)[[[OngoingGameProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OngoingGameProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OngoingGameProto*)[[[OngoingGameProto builder] mergeFromCodedInputStream:input] build];
}
+ (OngoingGameProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OngoingGameProto*)[[[OngoingGameProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OngoingGameProto_Builder*) builder {
  return [[[OngoingGameProto_Builder alloc] init] autorelease];
}
+ (OngoingGameProto_Builder*) builderWithPrototype:(OngoingGameProto*) prototype {
  return [[OngoingGameProto builder] mergeFrom:prototype];
}
- (OngoingGameProto_Builder*) builder {
  return [OngoingGameProto builder];
}
@end

@interface OngoingGameProto_Builder()
@property (retain) OngoingGameProto* result;
@end

@implementation OngoingGameProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[OngoingGameProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (OngoingGameProto_Builder*) clear {
  self.result = [[[OngoingGameProto alloc] init] autorelease];
  return self;
}
- (OngoingGameProto_Builder*) clone {
  return [OngoingGameProto builderWithPrototype:result];
}
- (OngoingGameProto*) defaultInstance {
  return [OngoingGameProto defaultInstance];
}
- (OngoingGameProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OngoingGameProto*) buildPartial {
  OngoingGameProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (OngoingGameProto_Builder*) mergeFrom:(OngoingGameProto*) other {
  if (other == [OngoingGameProto defaultInstance]) {
    return self;
  }
  if (other.hasGameSoFar) {
    [self mergeGameSoFar:other.gameSoFar];
  }
  if (other.hasMyNewRound) {
    [self mergeMyNewRound:other.myNewRound];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OngoingGameProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OngoingGameProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        GameResultsProto_Builder* subBuilder = [GameResultsProto builder];
        if (self.hasGameSoFar) {
          [subBuilder mergeFrom:self.gameSoFar];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameSoFar:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        UnfinishedRoundProto_Builder* subBuilder = [UnfinishedRoundProto builder];
        if (self.hasMyNewRound) {
          [subBuilder mergeFrom:self.myNewRound];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMyNewRound:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameSoFar {
  return result.hasGameSoFar;
}
- (GameResultsProto*) gameSoFar {
  return result.gameSoFar;
}
- (OngoingGameProto_Builder*) setGameSoFar:(GameResultsProto*) value {
  result.hasGameSoFar = YES;
  result.gameSoFar = value;
  return self;
}
- (OngoingGameProto_Builder*) setGameSoFarBuilder:(GameResultsProto_Builder*) builderForValue {
  return [self setGameSoFar:[builderForValue build]];
}
- (OngoingGameProto_Builder*) mergeGameSoFar:(GameResultsProto*) value {
  if (result.hasGameSoFar &&
      result.gameSoFar != [GameResultsProto defaultInstance]) {
    result.gameSoFar =
      [[[GameResultsProto builderWithPrototype:result.gameSoFar] mergeFrom:value] buildPartial];
  } else {
    result.gameSoFar = value;
  }
  result.hasGameSoFar = YES;
  return self;
}
- (OngoingGameProto_Builder*) clearGameSoFar {
  result.hasGameSoFar = NO;
  result.gameSoFar = [GameResultsProto defaultInstance];
  return self;
}
- (BOOL) hasMyNewRound {
  return result.hasMyNewRound;
}
- (UnfinishedRoundProto*) myNewRound {
  return result.myNewRound;
}
- (OngoingGameProto_Builder*) setMyNewRound:(UnfinishedRoundProto*) value {
  result.hasMyNewRound = YES;
  result.myNewRound = value;
  return self;
}
- (OngoingGameProto_Builder*) setMyNewRoundBuilder:(UnfinishedRoundProto_Builder*) builderForValue {
  return [self setMyNewRound:[builderForValue build]];
}
- (OngoingGameProto_Builder*) mergeMyNewRound:(UnfinishedRoundProto*) value {
  if (result.hasMyNewRound &&
      result.myNewRound != [UnfinishedRoundProto defaultInstance]) {
    result.myNewRound =
      [[[UnfinishedRoundProto builderWithPrototype:result.myNewRound] mergeFrom:value] buildPartial];
  } else {
    result.myNewRound = value;
  }
  result.hasMyNewRound = YES;
  return self;
}
- (OngoingGameProto_Builder*) clearMyNewRound {
  result.hasMyNewRound = NO;
  result.myNewRound = [UnfinishedRoundProto defaultInstance];
  return self;
}
@end

@interface GameResultsProto ()
@property (retain) NSString* gameId;
@property (retain) PlayerGameResultsProto* firstPlayer;
@property (retain) PlayerGameResultsProto* secondPlayer;
@end

@implementation GameResultsProto

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasFirstPlayer {
  return !!hasFirstPlayer_;
}
- (void) setHasFirstPlayer:(BOOL) value {
  hasFirstPlayer_ = !!value;
}
@synthesize firstPlayer;
- (BOOL) hasSecondPlayer {
  return !!hasSecondPlayer_;
}
- (void) setHasSecondPlayer:(BOOL) value {
  hasSecondPlayer_ = !!value;
}
@synthesize secondPlayer;
- (void) dealloc {
  self.gameId = nil;
  self.firstPlayer = nil;
  self.secondPlayer = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameId = @"";
    self.firstPlayer = [PlayerGameResultsProto defaultInstance];
    self.secondPlayer = [PlayerGameResultsProto defaultInstance];
  }
  return self;
}
static GameResultsProto* defaultGameResultsProtoInstance = nil;
+ (void) initialize {
  if (self == [GameResultsProto class]) {
    defaultGameResultsProtoInstance = [[GameResultsProto alloc] init];
  }
}
+ (GameResultsProto*) defaultInstance {
  return defaultGameResultsProtoInstance;
}
- (GameResultsProto*) defaultInstance {
  return defaultGameResultsProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFirstPlayer) {
    [output writeMessage:1 value:self.firstPlayer];
  }
  if (self.hasSecondPlayer) {
    [output writeMessage:2 value:self.secondPlayer];
  }
  if (self.hasGameId) {
    [output writeString:3 value:self.gameId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFirstPlayer) {
    size += computeMessageSize(1, self.firstPlayer);
  }
  if (self.hasSecondPlayer) {
    size += computeMessageSize(2, self.secondPlayer);
  }
  if (self.hasGameId) {
    size += computeStringSize(3, self.gameId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GameResultsProto*) parseFromData:(NSData*) data {
  return (GameResultsProto*)[[[GameResultsProto builder] mergeFromData:data] build];
}
+ (GameResultsProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameResultsProto*)[[[GameResultsProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GameResultsProto*) parseFromInputStream:(NSInputStream*) input {
  return (GameResultsProto*)[[[GameResultsProto builder] mergeFromInputStream:input] build];
}
+ (GameResultsProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameResultsProto*)[[[GameResultsProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameResultsProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GameResultsProto*)[[[GameResultsProto builder] mergeFromCodedInputStream:input] build];
}
+ (GameResultsProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GameResultsProto*)[[[GameResultsProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GameResultsProto_Builder*) builder {
  return [[[GameResultsProto_Builder alloc] init] autorelease];
}
+ (GameResultsProto_Builder*) builderWithPrototype:(GameResultsProto*) prototype {
  return [[GameResultsProto builder] mergeFrom:prototype];
}
- (GameResultsProto_Builder*) builder {
  return [GameResultsProto builder];
}
@end

@interface GameResultsProto_Builder()
@property (retain) GameResultsProto* result;
@end

@implementation GameResultsProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GameResultsProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GameResultsProto_Builder*) clear {
  self.result = [[[GameResultsProto alloc] init] autorelease];
  return self;
}
- (GameResultsProto_Builder*) clone {
  return [GameResultsProto builderWithPrototype:result];
}
- (GameResultsProto*) defaultInstance {
  return [GameResultsProto defaultInstance];
}
- (GameResultsProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GameResultsProto*) buildPartial {
  GameResultsProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GameResultsProto_Builder*) mergeFrom:(GameResultsProto*) other {
  if (other == [GameResultsProto defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasFirstPlayer) {
    [self mergeFirstPlayer:other.firstPlayer];
  }
  if (other.hasSecondPlayer) {
    [self mergeSecondPlayer:other.secondPlayer];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GameResultsProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GameResultsProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PlayerGameResultsProto_Builder* subBuilder = [PlayerGameResultsProto builder];
        if (self.hasFirstPlayer) {
          [subBuilder mergeFrom:self.firstPlayer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFirstPlayer:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PlayerGameResultsProto_Builder* subBuilder = [PlayerGameResultsProto builder];
        if (self.hasSecondPlayer) {
          [subBuilder mergeFrom:self.secondPlayer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSecondPlayer:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setGameId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (GameResultsProto_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (GameResultsProto_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasFirstPlayer {
  return result.hasFirstPlayer;
}
- (PlayerGameResultsProto*) firstPlayer {
  return result.firstPlayer;
}
- (GameResultsProto_Builder*) setFirstPlayer:(PlayerGameResultsProto*) value {
  result.hasFirstPlayer = YES;
  result.firstPlayer = value;
  return self;
}
- (GameResultsProto_Builder*) setFirstPlayerBuilder:(PlayerGameResultsProto_Builder*) builderForValue {
  return [self setFirstPlayer:[builderForValue build]];
}
- (GameResultsProto_Builder*) mergeFirstPlayer:(PlayerGameResultsProto*) value {
  if (result.hasFirstPlayer &&
      result.firstPlayer != [PlayerGameResultsProto defaultInstance]) {
    result.firstPlayer =
      [[[PlayerGameResultsProto builderWithPrototype:result.firstPlayer] mergeFrom:value] buildPartial];
  } else {
    result.firstPlayer = value;
  }
  result.hasFirstPlayer = YES;
  return self;
}
- (GameResultsProto_Builder*) clearFirstPlayer {
  result.hasFirstPlayer = NO;
  result.firstPlayer = [PlayerGameResultsProto defaultInstance];
  return self;
}
- (BOOL) hasSecondPlayer {
  return result.hasSecondPlayer;
}
- (PlayerGameResultsProto*) secondPlayer {
  return result.secondPlayer;
}
- (GameResultsProto_Builder*) setSecondPlayer:(PlayerGameResultsProto*) value {
  result.hasSecondPlayer = YES;
  result.secondPlayer = value;
  return self;
}
- (GameResultsProto_Builder*) setSecondPlayerBuilder:(PlayerGameResultsProto_Builder*) builderForValue {
  return [self setSecondPlayer:[builderForValue build]];
}
- (GameResultsProto_Builder*) mergeSecondPlayer:(PlayerGameResultsProto*) value {
  if (result.hasSecondPlayer &&
      result.secondPlayer != [PlayerGameResultsProto defaultInstance]) {
    result.secondPlayer =
      [[[PlayerGameResultsProto builderWithPrototype:result.secondPlayer] mergeFrom:value] buildPartial];
  } else {
    result.secondPlayer = value;
  }
  result.hasSecondPlayer = YES;
  return self;
}
- (GameResultsProto_Builder*) clearSecondPlayer {
  result.hasSecondPlayer = NO;
  result.secondPlayer = [PlayerGameResultsProto defaultInstance];
  return self;
}
@end

@interface PlayerGameResultsProto ()
@property (retain) BasicUserProto* bup;
@property (retain) NSMutableArray* mutablePreviousRoundsStatsList;
@end

@implementation PlayerGameResultsProto

- (BOOL) hasBup {
  return !!hasBup_;
}
- (void) setHasBup:(BOOL) value {
  hasBup_ = !!value;
}
@synthesize bup;
@synthesize mutablePreviousRoundsStatsList;
- (void) dealloc {
  self.bup = nil;
  self.mutablePreviousRoundsStatsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.bup = [BasicUserProto defaultInstance];
  }
  return self;
}
static PlayerGameResultsProto* defaultPlayerGameResultsProtoInstance = nil;
+ (void) initialize {
  if (self == [PlayerGameResultsProto class]) {
    defaultPlayerGameResultsProtoInstance = [[PlayerGameResultsProto alloc] init];
  }
}
+ (PlayerGameResultsProto*) defaultInstance {
  return defaultPlayerGameResultsProtoInstance;
}
- (PlayerGameResultsProto*) defaultInstance {
  return defaultPlayerGameResultsProtoInstance;
}
- (NSArray*) previousRoundsStatsList {
  return mutablePreviousRoundsStatsList;
}
- (BasicRoundResultsProto*) previousRoundsStatsAtIndex:(int32_t) index {
  id value = [mutablePreviousRoundsStatsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBup) {
    [output writeMessage:1 value:self.bup];
  }
  for (BasicRoundResultsProto* element in self.previousRoundsStatsList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBup) {
    size += computeMessageSize(1, self.bup);
  }
  for (BasicRoundResultsProto* element in self.previousRoundsStatsList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PlayerGameResultsProto*) parseFromData:(NSData*) data {
  return (PlayerGameResultsProto*)[[[PlayerGameResultsProto builder] mergeFromData:data] build];
}
+ (PlayerGameResultsProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlayerGameResultsProto*)[[[PlayerGameResultsProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PlayerGameResultsProto*) parseFromInputStream:(NSInputStream*) input {
  return (PlayerGameResultsProto*)[[[PlayerGameResultsProto builder] mergeFromInputStream:input] build];
}
+ (PlayerGameResultsProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlayerGameResultsProto*)[[[PlayerGameResultsProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlayerGameResultsProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PlayerGameResultsProto*)[[[PlayerGameResultsProto builder] mergeFromCodedInputStream:input] build];
}
+ (PlayerGameResultsProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PlayerGameResultsProto*)[[[PlayerGameResultsProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlayerGameResultsProto_Builder*) builder {
  return [[[PlayerGameResultsProto_Builder alloc] init] autorelease];
}
+ (PlayerGameResultsProto_Builder*) builderWithPrototype:(PlayerGameResultsProto*) prototype {
  return [[PlayerGameResultsProto builder] mergeFrom:prototype];
}
- (PlayerGameResultsProto_Builder*) builder {
  return [PlayerGameResultsProto builder];
}
@end

@interface PlayerGameResultsProto_Builder()
@property (retain) PlayerGameResultsProto* result;
@end

@implementation PlayerGameResultsProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PlayerGameResultsProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PlayerGameResultsProto_Builder*) clear {
  self.result = [[[PlayerGameResultsProto alloc] init] autorelease];
  return self;
}
- (PlayerGameResultsProto_Builder*) clone {
  return [PlayerGameResultsProto builderWithPrototype:result];
}
- (PlayerGameResultsProto*) defaultInstance {
  return [PlayerGameResultsProto defaultInstance];
}
- (PlayerGameResultsProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PlayerGameResultsProto*) buildPartial {
  PlayerGameResultsProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PlayerGameResultsProto_Builder*) mergeFrom:(PlayerGameResultsProto*) other {
  if (other == [PlayerGameResultsProto defaultInstance]) {
    return self;
  }
  if (other.hasBup) {
    [self mergeBup:other.bup];
  }
  if (other.mutablePreviousRoundsStatsList.count > 0) {
    if (result.mutablePreviousRoundsStatsList == nil) {
      result.mutablePreviousRoundsStatsList = [NSMutableArray array];
    }
    [result.mutablePreviousRoundsStatsList addObjectsFromArray:other.mutablePreviousRoundsStatsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PlayerGameResultsProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PlayerGameResultsProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BasicUserProto_Builder* subBuilder = [BasicUserProto builder];
        if (self.hasBup) {
          [subBuilder mergeFrom:self.bup];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBup:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        BasicRoundResultsProto_Builder* subBuilder = [BasicRoundResultsProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPreviousRoundsStats:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBup {
  return result.hasBup;
}
- (BasicUserProto*) bup {
  return result.bup;
}
- (PlayerGameResultsProto_Builder*) setBup:(BasicUserProto*) value {
  result.hasBup = YES;
  result.bup = value;
  return self;
}
- (PlayerGameResultsProto_Builder*) setBupBuilder:(BasicUserProto_Builder*) builderForValue {
  return [self setBup:[builderForValue build]];
}
- (PlayerGameResultsProto_Builder*) mergeBup:(BasicUserProto*) value {
  if (result.hasBup &&
      result.bup != [BasicUserProto defaultInstance]) {
    result.bup =
      [[[BasicUserProto builderWithPrototype:result.bup] mergeFrom:value] buildPartial];
  } else {
    result.bup = value;
  }
  result.hasBup = YES;
  return self;
}
- (PlayerGameResultsProto_Builder*) clearBup {
  result.hasBup = NO;
  result.bup = [BasicUserProto defaultInstance];
  return self;
}
- (NSArray*) previousRoundsStatsList {
  if (result.mutablePreviousRoundsStatsList == nil) { return [NSArray array]; }
  return result.mutablePreviousRoundsStatsList;
}
- (BasicRoundResultsProto*) previousRoundsStatsAtIndex:(int32_t) index {
  return [result previousRoundsStatsAtIndex:index];
}
- (PlayerGameResultsProto_Builder*) replacePreviousRoundsStatsAtIndex:(int32_t) index with:(BasicRoundResultsProto*) value {
  [result.mutablePreviousRoundsStatsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PlayerGameResultsProto_Builder*) addAllPreviousRoundsStats:(NSArray*) values {
  if (result.mutablePreviousRoundsStatsList == nil) {
    result.mutablePreviousRoundsStatsList = [NSMutableArray array];
  }
  [result.mutablePreviousRoundsStatsList addObjectsFromArray:values];
  return self;
}
- (PlayerGameResultsProto_Builder*) clearPreviousRoundsStatsList {
  result.mutablePreviousRoundsStatsList = nil;
  return self;
}
- (PlayerGameResultsProto_Builder*) addPreviousRoundsStats:(BasicRoundResultsProto*) value {
  if (result.mutablePreviousRoundsStatsList == nil) {
    result.mutablePreviousRoundsStatsList = [NSMutableArray array];
  }
  [result.mutablePreviousRoundsStatsList addObject:value];
  return self;
}
@end

