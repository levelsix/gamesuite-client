// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TriviaQuestionFormat.pb.h"

@implementation TriviaQuestionFormatRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TriviaQuestionFormatRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface QuestionAnsweredProto ()
@property (retain) NSString* questionId;
@property QuestionAnsweredProto_AnswerType answerType;
@property int32_t questionNumber;
@property int64_t timeAnswered;
@end

@implementation QuestionAnsweredProto

- (BOOL) hasQuestionId {
  return !!hasQuestionId_;
}
- (void) setHasQuestionId:(BOOL) value {
  hasQuestionId_ = !!value;
}
@synthesize questionId;
- (BOOL) hasAnswerType {
  return !!hasAnswerType_;
}
- (void) setHasAnswerType:(BOOL) value {
  hasAnswerType_ = !!value;
}
@synthesize answerType;
- (BOOL) hasQuestionNumber {
  return !!hasQuestionNumber_;
}
- (void) setHasQuestionNumber:(BOOL) value {
  hasQuestionNumber_ = !!value;
}
@synthesize questionNumber;
- (BOOL) hasTimeAnswered {
  return !!hasTimeAnswered_;
}
- (void) setHasTimeAnswered:(BOOL) value {
  hasTimeAnswered_ = !!value;
}
@synthesize timeAnswered;
- (void) dealloc {
  self.questionId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.questionId = @"";
    self.answerType = QuestionAnsweredProto_AnswerTypeCorrect;
    self.questionNumber = 0;
    self.timeAnswered = 0L;
  }
  return self;
}
static QuestionAnsweredProto* defaultQuestionAnsweredProtoInstance = nil;
+ (void) initialize {
  if (self == [QuestionAnsweredProto class]) {
    defaultQuestionAnsweredProtoInstance = [[QuestionAnsweredProto alloc] init];
  }
}
+ (QuestionAnsweredProto*) defaultInstance {
  return defaultQuestionAnsweredProtoInstance;
}
- (QuestionAnsweredProto*) defaultInstance {
  return defaultQuestionAnsweredProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuestionId) {
    [output writeString:1 value:self.questionId];
  }
  if (self.hasAnswerType) {
    [output writeEnum:2 value:self.answerType];
  }
  if (self.hasQuestionNumber) {
    [output writeInt32:3 value:self.questionNumber];
  }
  if (self.hasTimeAnswered) {
    [output writeInt64:4 value:self.timeAnswered];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasQuestionId) {
    size += computeStringSize(1, self.questionId);
  }
  if (self.hasAnswerType) {
    size += computeEnumSize(2, self.answerType);
  }
  if (self.hasQuestionNumber) {
    size += computeInt32Size(3, self.questionNumber);
  }
  if (self.hasTimeAnswered) {
    size += computeInt64Size(4, self.timeAnswered);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (QuestionAnsweredProto*) parseFromData:(NSData*) data {
  return (QuestionAnsweredProto*)[[[QuestionAnsweredProto builder] mergeFromData:data] build];
}
+ (QuestionAnsweredProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QuestionAnsweredProto*)[[[QuestionAnsweredProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QuestionAnsweredProto*) parseFromInputStream:(NSInputStream*) input {
  return (QuestionAnsweredProto*)[[[QuestionAnsweredProto builder] mergeFromInputStream:input] build];
}
+ (QuestionAnsweredProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QuestionAnsweredProto*)[[[QuestionAnsweredProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QuestionAnsweredProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QuestionAnsweredProto*)[[[QuestionAnsweredProto builder] mergeFromCodedInputStream:input] build];
}
+ (QuestionAnsweredProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QuestionAnsweredProto*)[[[QuestionAnsweredProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QuestionAnsweredProto_Builder*) builder {
  return [[[QuestionAnsweredProto_Builder alloc] init] autorelease];
}
+ (QuestionAnsweredProto_Builder*) builderWithPrototype:(QuestionAnsweredProto*) prototype {
  return [[QuestionAnsweredProto builder] mergeFrom:prototype];
}
- (QuestionAnsweredProto_Builder*) builder {
  return [QuestionAnsweredProto builder];
}
@end

BOOL QuestionAnsweredProto_AnswerTypeIsValidValue(QuestionAnsweredProto_AnswerType value) {
  switch (value) {
    case QuestionAnsweredProto_AnswerTypeCorrect:
    case QuestionAnsweredProto_AnswerTypeIncorrect:
    case QuestionAnsweredProto_AnswerTypeSkipped:
      return YES;
    default:
      return NO;
  }
}
@interface QuestionAnsweredProto_Builder()
@property (retain) QuestionAnsweredProto* result;
@end

@implementation QuestionAnsweredProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[QuestionAnsweredProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (QuestionAnsweredProto_Builder*) clear {
  self.result = [[[QuestionAnsweredProto alloc] init] autorelease];
  return self;
}
- (QuestionAnsweredProto_Builder*) clone {
  return [QuestionAnsweredProto builderWithPrototype:result];
}
- (QuestionAnsweredProto*) defaultInstance {
  return [QuestionAnsweredProto defaultInstance];
}
- (QuestionAnsweredProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QuestionAnsweredProto*) buildPartial {
  QuestionAnsweredProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (QuestionAnsweredProto_Builder*) mergeFrom:(QuestionAnsweredProto*) other {
  if (other == [QuestionAnsweredProto defaultInstance]) {
    return self;
  }
  if (other.hasQuestionId) {
    [self setQuestionId:other.questionId];
  }
  if (other.hasAnswerType) {
    [self setAnswerType:other.answerType];
  }
  if (other.hasQuestionNumber) {
    [self setQuestionNumber:other.questionNumber];
  }
  if (other.hasTimeAnswered) {
    [self setTimeAnswered:other.timeAnswered];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QuestionAnsweredProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QuestionAnsweredProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setQuestionId:[input readString]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (QuestionAnsweredProto_AnswerTypeIsValidValue(value)) {
          [self setAnswerType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setQuestionNumber:[input readInt32]];
        break;
      }
      case 32: {
        [self setTimeAnswered:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasQuestionId {
  return result.hasQuestionId;
}
- (NSString*) questionId {
  return result.questionId;
}
- (QuestionAnsweredProto_Builder*) setQuestionId:(NSString*) value {
  result.hasQuestionId = YES;
  result.questionId = value;
  return self;
}
- (QuestionAnsweredProto_Builder*) clearQuestionId {
  result.hasQuestionId = NO;
  result.questionId = @"";
  return self;
}
- (BOOL) hasAnswerType {
  return result.hasAnswerType;
}
- (QuestionAnsweredProto_AnswerType) answerType {
  return result.answerType;
}
- (QuestionAnsweredProto_Builder*) setAnswerType:(QuestionAnsweredProto_AnswerType) value {
  result.hasAnswerType = YES;
  result.answerType = value;
  return self;
}
- (QuestionAnsweredProto_Builder*) clearAnswerType {
  result.hasAnswerType = NO;
  result.answerType = QuestionAnsweredProto_AnswerTypeCorrect;
  return self;
}
- (BOOL) hasQuestionNumber {
  return result.hasQuestionNumber;
}
- (int32_t) questionNumber {
  return result.questionNumber;
}
- (QuestionAnsweredProto_Builder*) setQuestionNumber:(int32_t) value {
  result.hasQuestionNumber = YES;
  result.questionNumber = value;
  return self;
}
- (QuestionAnsweredProto_Builder*) clearQuestionNumber {
  result.hasQuestionNumber = NO;
  result.questionNumber = 0;
  return self;
}
- (BOOL) hasTimeAnswered {
  return result.hasTimeAnswered;
}
- (int64_t) timeAnswered {
  return result.timeAnswered;
}
- (QuestionAnsweredProto_Builder*) setTimeAnswered:(int64_t) value {
  result.hasTimeAnswered = YES;
  result.timeAnswered = value;
  return self;
}
- (QuestionAnsweredProto_Builder*) clearTimeAnswered {
  result.hasTimeAnswered = NO;
  result.timeAnswered = 0L;
  return self;
}
@end

@interface QuestionProto ()
@property (retain) NSString* id;
@property (retain) MultipleChoiceQuestionProto* multipleChoice;
@property (retain) PictureQuestionProto* pictures;
@end

@implementation QuestionProto

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasMultipleChoice {
  return !!hasMultipleChoice_;
}
- (void) setHasMultipleChoice:(BOOL) value {
  hasMultipleChoice_ = !!value;
}
@synthesize multipleChoice;
- (BOOL) hasPictures {
  return !!hasPictures_;
}
- (void) setHasPictures:(BOOL) value {
  hasPictures_ = !!value;
}
@synthesize pictures;
- (void) dealloc {
  self.id = nil;
  self.multipleChoice = nil;
  self.pictures = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.multipleChoice = [MultipleChoiceQuestionProto defaultInstance];
    self.pictures = [PictureQuestionProto defaultInstance];
  }
  return self;
}
static QuestionProto* defaultQuestionProtoInstance = nil;
+ (void) initialize {
  if (self == [QuestionProto class]) {
    defaultQuestionProtoInstance = [[QuestionProto alloc] init];
  }
}
+ (QuestionProto*) defaultInstance {
  return defaultQuestionProtoInstance;
}
- (QuestionProto*) defaultInstance {
  return defaultQuestionProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasMultipleChoice) {
    [output writeMessage:2 value:self.multipleChoice];
  }
  if (self.hasPictures) {
    [output writeMessage:3 value:self.pictures];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasMultipleChoice) {
    size += computeMessageSize(2, self.multipleChoice);
  }
  if (self.hasPictures) {
    size += computeMessageSize(3, self.pictures);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (QuestionProto*) parseFromData:(NSData*) data {
  return (QuestionProto*)[[[QuestionProto builder] mergeFromData:data] build];
}
+ (QuestionProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QuestionProto*)[[[QuestionProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QuestionProto*) parseFromInputStream:(NSInputStream*) input {
  return (QuestionProto*)[[[QuestionProto builder] mergeFromInputStream:input] build];
}
+ (QuestionProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QuestionProto*)[[[QuestionProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QuestionProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QuestionProto*)[[[QuestionProto builder] mergeFromCodedInputStream:input] build];
}
+ (QuestionProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QuestionProto*)[[[QuestionProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QuestionProto_Builder*) builder {
  return [[[QuestionProto_Builder alloc] init] autorelease];
}
+ (QuestionProto_Builder*) builderWithPrototype:(QuestionProto*) prototype {
  return [[QuestionProto builder] mergeFrom:prototype];
}
- (QuestionProto_Builder*) builder {
  return [QuestionProto builder];
}
@end

@interface QuestionProto_Builder()
@property (retain) QuestionProto* result;
@end

@implementation QuestionProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[QuestionProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (QuestionProto_Builder*) clear {
  self.result = [[[QuestionProto alloc] init] autorelease];
  return self;
}
- (QuestionProto_Builder*) clone {
  return [QuestionProto builderWithPrototype:result];
}
- (QuestionProto*) defaultInstance {
  return [QuestionProto defaultInstance];
}
- (QuestionProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QuestionProto*) buildPartial {
  QuestionProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (QuestionProto_Builder*) mergeFrom:(QuestionProto*) other {
  if (other == [QuestionProto defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasMultipleChoice) {
    [self mergeMultipleChoice:other.multipleChoice];
  }
  if (other.hasPictures) {
    [self mergePictures:other.pictures];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QuestionProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QuestionProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        MultipleChoiceQuestionProto_Builder* subBuilder = [MultipleChoiceQuestionProto builder];
        if (self.hasMultipleChoice) {
          [subBuilder mergeFrom:self.multipleChoice];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMultipleChoice:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PictureQuestionProto_Builder* subBuilder = [PictureQuestionProto builder];
        if (self.hasPictures) {
          [subBuilder mergeFrom:self.pictures];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPictures:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (QuestionProto_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (QuestionProto_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasMultipleChoice {
  return result.hasMultipleChoice;
}
- (MultipleChoiceQuestionProto*) multipleChoice {
  return result.multipleChoice;
}
- (QuestionProto_Builder*) setMultipleChoice:(MultipleChoiceQuestionProto*) value {
  result.hasMultipleChoice = YES;
  result.multipleChoice = value;
  return self;
}
- (QuestionProto_Builder*) setMultipleChoiceBuilder:(MultipleChoiceQuestionProto_Builder*) builderForValue {
  return [self setMultipleChoice:[builderForValue build]];
}
- (QuestionProto_Builder*) mergeMultipleChoice:(MultipleChoiceQuestionProto*) value {
  if (result.hasMultipleChoice &&
      result.multipleChoice != [MultipleChoiceQuestionProto defaultInstance]) {
    result.multipleChoice =
      [[[MultipleChoiceQuestionProto builderWithPrototype:result.multipleChoice] mergeFrom:value] buildPartial];
  } else {
    result.multipleChoice = value;
  }
  result.hasMultipleChoice = YES;
  return self;
}
- (QuestionProto_Builder*) clearMultipleChoice {
  result.hasMultipleChoice = NO;
  result.multipleChoice = [MultipleChoiceQuestionProto defaultInstance];
  return self;
}
- (BOOL) hasPictures {
  return result.hasPictures;
}
- (PictureQuestionProto*) pictures {
  return result.pictures;
}
- (QuestionProto_Builder*) setPictures:(PictureQuestionProto*) value {
  result.hasPictures = YES;
  result.pictures = value;
  return self;
}
- (QuestionProto_Builder*) setPicturesBuilder:(PictureQuestionProto_Builder*) builderForValue {
  return [self setPictures:[builderForValue build]];
}
- (QuestionProto_Builder*) mergePictures:(PictureQuestionProto*) value {
  if (result.hasPictures &&
      result.pictures != [PictureQuestionProto defaultInstance]) {
    result.pictures =
      [[[PictureQuestionProto builderWithPrototype:result.pictures] mergeFrom:value] buildPartial];
  } else {
    result.pictures = value;
  }
  result.hasPictures = YES;
  return self;
}
- (QuestionProto_Builder*) clearPictures {
  result.hasPictures = NO;
  result.pictures = [PictureQuestionProto defaultInstance];
  return self;
}
@end

@interface MultipleChoiceQuestionProto ()
@property (retain) NSString* question;
@property (retain) NSString* answerId;
@property (retain) NSMutableArray* mutableAnswersList;
@end

@implementation MultipleChoiceQuestionProto

- (BOOL) hasQuestion {
  return !!hasQuestion_;
}
- (void) setHasQuestion:(BOOL) value {
  hasQuestion_ = !!value;
}
@synthesize question;
- (BOOL) hasAnswerId {
  return !!hasAnswerId_;
}
- (void) setHasAnswerId:(BOOL) value {
  hasAnswerId_ = !!value;
}
@synthesize answerId;
@synthesize mutableAnswersList;
- (void) dealloc {
  self.question = nil;
  self.answerId = nil;
  self.mutableAnswersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.question = @"";
    self.answerId = @"";
  }
  return self;
}
static MultipleChoiceQuestionProto* defaultMultipleChoiceQuestionProtoInstance = nil;
+ (void) initialize {
  if (self == [MultipleChoiceQuestionProto class]) {
    defaultMultipleChoiceQuestionProtoInstance = [[MultipleChoiceQuestionProto alloc] init];
  }
}
+ (MultipleChoiceQuestionProto*) defaultInstance {
  return defaultMultipleChoiceQuestionProtoInstance;
}
- (MultipleChoiceQuestionProto*) defaultInstance {
  return defaultMultipleChoiceQuestionProtoInstance;
}
- (NSArray*) answersList {
  return mutableAnswersList;
}
- (MultipleChoiceAnswerProto*) answersAtIndex:(int32_t) index {
  id value = [mutableAnswersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuestion) {
    [output writeString:1 value:self.question];
  }
  if (self.hasAnswerId) {
    [output writeString:2 value:self.answerId];
  }
  for (MultipleChoiceAnswerProto* element in self.answersList) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasQuestion) {
    size += computeStringSize(1, self.question);
  }
  if (self.hasAnswerId) {
    size += computeStringSize(2, self.answerId);
  }
  for (MultipleChoiceAnswerProto* element in self.answersList) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MultipleChoiceQuestionProto*) parseFromData:(NSData*) data {
  return (MultipleChoiceQuestionProto*)[[[MultipleChoiceQuestionProto builder] mergeFromData:data] build];
}
+ (MultipleChoiceQuestionProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MultipleChoiceQuestionProto*)[[[MultipleChoiceQuestionProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MultipleChoiceQuestionProto*) parseFromInputStream:(NSInputStream*) input {
  return (MultipleChoiceQuestionProto*)[[[MultipleChoiceQuestionProto builder] mergeFromInputStream:input] build];
}
+ (MultipleChoiceQuestionProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MultipleChoiceQuestionProto*)[[[MultipleChoiceQuestionProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MultipleChoiceQuestionProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MultipleChoiceQuestionProto*)[[[MultipleChoiceQuestionProto builder] mergeFromCodedInputStream:input] build];
}
+ (MultipleChoiceQuestionProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MultipleChoiceQuestionProto*)[[[MultipleChoiceQuestionProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MultipleChoiceQuestionProto_Builder*) builder {
  return [[[MultipleChoiceQuestionProto_Builder alloc] init] autorelease];
}
+ (MultipleChoiceQuestionProto_Builder*) builderWithPrototype:(MultipleChoiceQuestionProto*) prototype {
  return [[MultipleChoiceQuestionProto builder] mergeFrom:prototype];
}
- (MultipleChoiceQuestionProto_Builder*) builder {
  return [MultipleChoiceQuestionProto builder];
}
@end

@interface MultipleChoiceQuestionProto_Builder()
@property (retain) MultipleChoiceQuestionProto* result;
@end

@implementation MultipleChoiceQuestionProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MultipleChoiceQuestionProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MultipleChoiceQuestionProto_Builder*) clear {
  self.result = [[[MultipleChoiceQuestionProto alloc] init] autorelease];
  return self;
}
- (MultipleChoiceQuestionProto_Builder*) clone {
  return [MultipleChoiceQuestionProto builderWithPrototype:result];
}
- (MultipleChoiceQuestionProto*) defaultInstance {
  return [MultipleChoiceQuestionProto defaultInstance];
}
- (MultipleChoiceQuestionProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MultipleChoiceQuestionProto*) buildPartial {
  MultipleChoiceQuestionProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MultipleChoiceQuestionProto_Builder*) mergeFrom:(MultipleChoiceQuestionProto*) other {
  if (other == [MultipleChoiceQuestionProto defaultInstance]) {
    return self;
  }
  if (other.hasQuestion) {
    [self setQuestion:other.question];
  }
  if (other.hasAnswerId) {
    [self setAnswerId:other.answerId];
  }
  if (other.mutableAnswersList.count > 0) {
    if (result.mutableAnswersList == nil) {
      result.mutableAnswersList = [NSMutableArray array];
    }
    [result.mutableAnswersList addObjectsFromArray:other.mutableAnswersList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MultipleChoiceQuestionProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MultipleChoiceQuestionProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setQuestion:[input readString]];
        break;
      }
      case 18: {
        [self setAnswerId:[input readString]];
        break;
      }
      case 26: {
        MultipleChoiceAnswerProto_Builder* subBuilder = [MultipleChoiceAnswerProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAnswers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasQuestion {
  return result.hasQuestion;
}
- (NSString*) question {
  return result.question;
}
- (MultipleChoiceQuestionProto_Builder*) setQuestion:(NSString*) value {
  result.hasQuestion = YES;
  result.question = value;
  return self;
}
- (MultipleChoiceQuestionProto_Builder*) clearQuestion {
  result.hasQuestion = NO;
  result.question = @"";
  return self;
}
- (BOOL) hasAnswerId {
  return result.hasAnswerId;
}
- (NSString*) answerId {
  return result.answerId;
}
- (MultipleChoiceQuestionProto_Builder*) setAnswerId:(NSString*) value {
  result.hasAnswerId = YES;
  result.answerId = value;
  return self;
}
- (MultipleChoiceQuestionProto_Builder*) clearAnswerId {
  result.hasAnswerId = NO;
  result.answerId = @"";
  return self;
}
- (NSArray*) answersList {
  if (result.mutableAnswersList == nil) { return [NSArray array]; }
  return result.mutableAnswersList;
}
- (MultipleChoiceAnswerProto*) answersAtIndex:(int32_t) index {
  return [result answersAtIndex:index];
}
- (MultipleChoiceQuestionProto_Builder*) replaceAnswersAtIndex:(int32_t) index with:(MultipleChoiceAnswerProto*) value {
  [result.mutableAnswersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MultipleChoiceQuestionProto_Builder*) addAllAnswers:(NSArray*) values {
  if (result.mutableAnswersList == nil) {
    result.mutableAnswersList = [NSMutableArray array];
  }
  [result.mutableAnswersList addObjectsFromArray:values];
  return self;
}
- (MultipleChoiceQuestionProto_Builder*) clearAnswersList {
  result.mutableAnswersList = nil;
  return self;
}
- (MultipleChoiceQuestionProto_Builder*) addAnswers:(MultipleChoiceAnswerProto*) value {
  if (result.mutableAnswersList == nil) {
    result.mutableAnswersList = [NSMutableArray array];
  }
  [result.mutableAnswersList addObject:value];
  return self;
}
@end

@interface MultipleChoiceAnswerProto ()
@property (retain) NSString* id;
@property (retain) NSString* answer;
@property MultipleChoiceAnswerProto_AnswerType type;
@end

@implementation MultipleChoiceAnswerProto

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasAnswer {
  return !!hasAnswer_;
}
- (void) setHasAnswer:(BOOL) value {
  hasAnswer_ = !!value;
}
@synthesize answer;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (void) dealloc {
  self.id = nil;
  self.answer = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.answer = @"";
    self.type = MultipleChoiceAnswerProto_AnswerTypeText;
  }
  return self;
}
static MultipleChoiceAnswerProto* defaultMultipleChoiceAnswerProtoInstance = nil;
+ (void) initialize {
  if (self == [MultipleChoiceAnswerProto class]) {
    defaultMultipleChoiceAnswerProtoInstance = [[MultipleChoiceAnswerProto alloc] init];
  }
}
+ (MultipleChoiceAnswerProto*) defaultInstance {
  return defaultMultipleChoiceAnswerProtoInstance;
}
- (MultipleChoiceAnswerProto*) defaultInstance {
  return defaultMultipleChoiceAnswerProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasAnswer) {
    [output writeString:2 value:self.answer];
  }
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasAnswer) {
    size += computeStringSize(2, self.answer);
  }
  if (self.hasType) {
    size += computeEnumSize(3, self.type);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MultipleChoiceAnswerProto*) parseFromData:(NSData*) data {
  return (MultipleChoiceAnswerProto*)[[[MultipleChoiceAnswerProto builder] mergeFromData:data] build];
}
+ (MultipleChoiceAnswerProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MultipleChoiceAnswerProto*)[[[MultipleChoiceAnswerProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MultipleChoiceAnswerProto*) parseFromInputStream:(NSInputStream*) input {
  return (MultipleChoiceAnswerProto*)[[[MultipleChoiceAnswerProto builder] mergeFromInputStream:input] build];
}
+ (MultipleChoiceAnswerProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MultipleChoiceAnswerProto*)[[[MultipleChoiceAnswerProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MultipleChoiceAnswerProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MultipleChoiceAnswerProto*)[[[MultipleChoiceAnswerProto builder] mergeFromCodedInputStream:input] build];
}
+ (MultipleChoiceAnswerProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MultipleChoiceAnswerProto*)[[[MultipleChoiceAnswerProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MultipleChoiceAnswerProto_Builder*) builder {
  return [[[MultipleChoiceAnswerProto_Builder alloc] init] autorelease];
}
+ (MultipleChoiceAnswerProto_Builder*) builderWithPrototype:(MultipleChoiceAnswerProto*) prototype {
  return [[MultipleChoiceAnswerProto builder] mergeFrom:prototype];
}
- (MultipleChoiceAnswerProto_Builder*) builder {
  return [MultipleChoiceAnswerProto builder];
}
@end

BOOL MultipleChoiceAnswerProto_AnswerTypeIsValidValue(MultipleChoiceAnswerProto_AnswerType value) {
  switch (value) {
    case MultipleChoiceAnswerProto_AnswerTypeText:
    case MultipleChoiceAnswerProto_AnswerTypePicture:
      return YES;
    default:
      return NO;
  }
}
@interface MultipleChoiceAnswerProto_Builder()
@property (retain) MultipleChoiceAnswerProto* result;
@end

@implementation MultipleChoiceAnswerProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MultipleChoiceAnswerProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MultipleChoiceAnswerProto_Builder*) clear {
  self.result = [[[MultipleChoiceAnswerProto alloc] init] autorelease];
  return self;
}
- (MultipleChoiceAnswerProto_Builder*) clone {
  return [MultipleChoiceAnswerProto builderWithPrototype:result];
}
- (MultipleChoiceAnswerProto*) defaultInstance {
  return [MultipleChoiceAnswerProto defaultInstance];
}
- (MultipleChoiceAnswerProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MultipleChoiceAnswerProto*) buildPartial {
  MultipleChoiceAnswerProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MultipleChoiceAnswerProto_Builder*) mergeFrom:(MultipleChoiceAnswerProto*) other {
  if (other == [MultipleChoiceAnswerProto defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasAnswer) {
    [self setAnswer:other.answer];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MultipleChoiceAnswerProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MultipleChoiceAnswerProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setAnswer:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (MultipleChoiceAnswerProto_AnswerTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MultipleChoiceAnswerProto_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MultipleChoiceAnswerProto_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasAnswer {
  return result.hasAnswer;
}
- (NSString*) answer {
  return result.answer;
}
- (MultipleChoiceAnswerProto_Builder*) setAnswer:(NSString*) value {
  result.hasAnswer = YES;
  result.answer = value;
  return self;
}
- (MultipleChoiceAnswerProto_Builder*) clearAnswer {
  result.hasAnswer = NO;
  result.answer = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (MultipleChoiceAnswerProto_AnswerType) type {
  return result.type;
}
- (MultipleChoiceAnswerProto_Builder*) setType:(MultipleChoiceAnswerProto_AnswerType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (MultipleChoiceAnswerProto_Builder*) clearType {
  result.hasType = NO;
  result.type = MultipleChoiceAnswerProto_AnswerTypeText;
  return self;
}
@end

@interface PictureQuestionProto ()
@property (retain) NSMutableArray* mutableImageNamesList;
@property (retain) NSString* answer;
@end

@implementation PictureQuestionProto

@synthesize mutableImageNamesList;
- (BOOL) hasAnswer {
  return !!hasAnswer_;
}
- (void) setHasAnswer:(BOOL) value {
  hasAnswer_ = !!value;
}
@synthesize answer;
- (void) dealloc {
  self.mutableImageNamesList = nil;
  self.answer = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.answer = @"";
  }
  return self;
}
static PictureQuestionProto* defaultPictureQuestionProtoInstance = nil;
+ (void) initialize {
  if (self == [PictureQuestionProto class]) {
    defaultPictureQuestionProtoInstance = [[PictureQuestionProto alloc] init];
  }
}
+ (PictureQuestionProto*) defaultInstance {
  return defaultPictureQuestionProtoInstance;
}
- (PictureQuestionProto*) defaultInstance {
  return defaultPictureQuestionProtoInstance;
}
- (NSArray*) imageNamesList {
  return mutableImageNamesList;
}
- (NSString*) imageNamesAtIndex:(int32_t) index {
  id value = [mutableImageNamesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (NSString* element in self.mutableImageNamesList) {
    [output writeString:1 value:element];
  }
  if (self.hasAnswer) {
    [output writeString:2 value:self.answer];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableImageNamesList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableImageNamesList.count;
  }
  if (self.hasAnswer) {
    size += computeStringSize(2, self.answer);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PictureQuestionProto*) parseFromData:(NSData*) data {
  return (PictureQuestionProto*)[[[PictureQuestionProto builder] mergeFromData:data] build];
}
+ (PictureQuestionProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PictureQuestionProto*)[[[PictureQuestionProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PictureQuestionProto*) parseFromInputStream:(NSInputStream*) input {
  return (PictureQuestionProto*)[[[PictureQuestionProto builder] mergeFromInputStream:input] build];
}
+ (PictureQuestionProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PictureQuestionProto*)[[[PictureQuestionProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PictureQuestionProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PictureQuestionProto*)[[[PictureQuestionProto builder] mergeFromCodedInputStream:input] build];
}
+ (PictureQuestionProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PictureQuestionProto*)[[[PictureQuestionProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PictureQuestionProto_Builder*) builder {
  return [[[PictureQuestionProto_Builder alloc] init] autorelease];
}
+ (PictureQuestionProto_Builder*) builderWithPrototype:(PictureQuestionProto*) prototype {
  return [[PictureQuestionProto builder] mergeFrom:prototype];
}
- (PictureQuestionProto_Builder*) builder {
  return [PictureQuestionProto builder];
}
@end

@interface PictureQuestionProto_Builder()
@property (retain) PictureQuestionProto* result;
@end

@implementation PictureQuestionProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PictureQuestionProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PictureQuestionProto_Builder*) clear {
  self.result = [[[PictureQuestionProto alloc] init] autorelease];
  return self;
}
- (PictureQuestionProto_Builder*) clone {
  return [PictureQuestionProto builderWithPrototype:result];
}
- (PictureQuestionProto*) defaultInstance {
  return [PictureQuestionProto defaultInstance];
}
- (PictureQuestionProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PictureQuestionProto*) buildPartial {
  PictureQuestionProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PictureQuestionProto_Builder*) mergeFrom:(PictureQuestionProto*) other {
  if (other == [PictureQuestionProto defaultInstance]) {
    return self;
  }
  if (other.mutableImageNamesList.count > 0) {
    if (result.mutableImageNamesList == nil) {
      result.mutableImageNamesList = [NSMutableArray array];
    }
    [result.mutableImageNamesList addObjectsFromArray:other.mutableImageNamesList];
  }
  if (other.hasAnswer) {
    [self setAnswer:other.answer];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PictureQuestionProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PictureQuestionProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addImageNames:[input readString]];
        break;
      }
      case 18: {
        [self setAnswer:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) imageNamesList {
  if (result.mutableImageNamesList == nil) {
    return [NSArray array];
  }
  return result.mutableImageNamesList;
}
- (NSString*) imageNamesAtIndex:(int32_t) index {
  return [result imageNamesAtIndex:index];
}
- (PictureQuestionProto_Builder*) replaceImageNamesAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableImageNamesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PictureQuestionProto_Builder*) addImageNames:(NSString*) value {
  if (result.mutableImageNamesList == nil) {
    result.mutableImageNamesList = [NSMutableArray array];
  }
  [result.mutableImageNamesList addObject:value];
  return self;
}
- (PictureQuestionProto_Builder*) addAllImageNames:(NSArray*) values {
  if (result.mutableImageNamesList == nil) {
    result.mutableImageNamesList = [NSMutableArray array];
  }
  [result.mutableImageNamesList addObjectsFromArray:values];
  return self;
}
- (PictureQuestionProto_Builder*) clearImageNamesList {
  result.mutableImageNamesList = nil;
  return self;
}
- (BOOL) hasAnswer {
  return result.hasAnswer;
}
- (NSString*) answer {
  return result.answer;
}
- (PictureQuestionProto_Builder*) setAnswer:(NSString*) value {
  result.hasAnswer = YES;
  result.answer = value;
  return self;
}
- (PictureQuestionProto_Builder*) clearAnswer {
  result.hasAnswer = NO;
  result.answer = @"";
  return self;
}
@end

