// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TriviaRoundFormat.pb.h"

@implementation TriviaRoundFormatRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TriviaRoundFormatRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [TriviaQuestionFormatRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface BasicRoundResultsProto ()
@property (retain) NSString* id;
@property int32_t numQuestionsSeen;
@property int32_t numQuestionsAnsweredCorrectly;
@property int32_t score;
@property int32_t roundNumber;
@end

@implementation BasicRoundResultsProto

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasNumQuestionsSeen {
  return !!hasNumQuestionsSeen_;
}
- (void) setHasNumQuestionsSeen:(BOOL) value {
  hasNumQuestionsSeen_ = !!value;
}
@synthesize numQuestionsSeen;
- (BOOL) hasNumQuestionsAnsweredCorrectly {
  return !!hasNumQuestionsAnsweredCorrectly_;
}
- (void) setHasNumQuestionsAnsweredCorrectly:(BOOL) value {
  hasNumQuestionsAnsweredCorrectly_ = !!value;
}
@synthesize numQuestionsAnsweredCorrectly;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) value {
  hasScore_ = !!value;
}
@synthesize score;
- (BOOL) hasRoundNumber {
  return !!hasRoundNumber_;
}
- (void) setHasRoundNumber:(BOOL) value {
  hasRoundNumber_ = !!value;
}
@synthesize roundNumber;
- (void) dealloc {
  self.id = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.numQuestionsSeen = 0;
    self.numQuestionsAnsweredCorrectly = 0;
    self.score = 0;
    self.roundNumber = 0;
  }
  return self;
}
static BasicRoundResultsProto* defaultBasicRoundResultsProtoInstance = nil;
+ (void) initialize {
  if (self == [BasicRoundResultsProto class]) {
    defaultBasicRoundResultsProtoInstance = [[BasicRoundResultsProto alloc] init];
  }
}
+ (BasicRoundResultsProto*) defaultInstance {
  return defaultBasicRoundResultsProtoInstance;
}
- (BasicRoundResultsProto*) defaultInstance {
  return defaultBasicRoundResultsProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNumQuestionsSeen) {
    [output writeInt32:1 value:self.numQuestionsSeen];
  }
  if (self.hasNumQuestionsAnsweredCorrectly) {
    [output writeInt32:2 value:self.numQuestionsAnsweredCorrectly];
  }
  if (self.hasScore) {
    [output writeInt32:3 value:self.score];
  }
  if (self.hasRoundNumber) {
    [output writeInt32:4 value:self.roundNumber];
  }
  if (self.hasId) {
    [output writeString:5 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNumQuestionsSeen) {
    size += computeInt32Size(1, self.numQuestionsSeen);
  }
  if (self.hasNumQuestionsAnsweredCorrectly) {
    size += computeInt32Size(2, self.numQuestionsAnsweredCorrectly);
  }
  if (self.hasScore) {
    size += computeInt32Size(3, self.score);
  }
  if (self.hasRoundNumber) {
    size += computeInt32Size(4, self.roundNumber);
  }
  if (self.hasId) {
    size += computeStringSize(5, self.id);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BasicRoundResultsProto*) parseFromData:(NSData*) data {
  return (BasicRoundResultsProto*)[[[BasicRoundResultsProto builder] mergeFromData:data] build];
}
+ (BasicRoundResultsProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasicRoundResultsProto*)[[[BasicRoundResultsProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BasicRoundResultsProto*) parseFromInputStream:(NSInputStream*) input {
  return (BasicRoundResultsProto*)[[[BasicRoundResultsProto builder] mergeFromInputStream:input] build];
}
+ (BasicRoundResultsProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasicRoundResultsProto*)[[[BasicRoundResultsProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasicRoundResultsProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BasicRoundResultsProto*)[[[BasicRoundResultsProto builder] mergeFromCodedInputStream:input] build];
}
+ (BasicRoundResultsProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasicRoundResultsProto*)[[[BasicRoundResultsProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasicRoundResultsProto_Builder*) builder {
  return [[[BasicRoundResultsProto_Builder alloc] init] autorelease];
}
+ (BasicRoundResultsProto_Builder*) builderWithPrototype:(BasicRoundResultsProto*) prototype {
  return [[BasicRoundResultsProto builder] mergeFrom:prototype];
}
- (BasicRoundResultsProto_Builder*) builder {
  return [BasicRoundResultsProto builder];
}
@end

@interface BasicRoundResultsProto_Builder()
@property (retain) BasicRoundResultsProto* result;
@end

@implementation BasicRoundResultsProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BasicRoundResultsProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BasicRoundResultsProto_Builder*) clear {
  self.result = [[[BasicRoundResultsProto alloc] init] autorelease];
  return self;
}
- (BasicRoundResultsProto_Builder*) clone {
  return [BasicRoundResultsProto builderWithPrototype:result];
}
- (BasicRoundResultsProto*) defaultInstance {
  return [BasicRoundResultsProto defaultInstance];
}
- (BasicRoundResultsProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BasicRoundResultsProto*) buildPartial {
  BasicRoundResultsProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BasicRoundResultsProto_Builder*) mergeFrom:(BasicRoundResultsProto*) other {
  if (other == [BasicRoundResultsProto defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasNumQuestionsSeen) {
    [self setNumQuestionsSeen:other.numQuestionsSeen];
  }
  if (other.hasNumQuestionsAnsweredCorrectly) {
    [self setNumQuestionsAnsweredCorrectly:other.numQuestionsAnsweredCorrectly];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasRoundNumber) {
    [self setRoundNumber:other.roundNumber];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BasicRoundResultsProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BasicRoundResultsProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNumQuestionsSeen:[input readInt32]];
        break;
      }
      case 16: {
        [self setNumQuestionsAnsweredCorrectly:[input readInt32]];
        break;
      }
      case 24: {
        [self setScore:[input readInt32]];
        break;
      }
      case 32: {
        [self setRoundNumber:[input readInt32]];
        break;
      }
      case 42: {
        [self setId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (BasicRoundResultsProto_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (BasicRoundResultsProto_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasNumQuestionsSeen {
  return result.hasNumQuestionsSeen;
}
- (int32_t) numQuestionsSeen {
  return result.numQuestionsSeen;
}
- (BasicRoundResultsProto_Builder*) setNumQuestionsSeen:(int32_t) value {
  result.hasNumQuestionsSeen = YES;
  result.numQuestionsSeen = value;
  return self;
}
- (BasicRoundResultsProto_Builder*) clearNumQuestionsSeen {
  result.hasNumQuestionsSeen = NO;
  result.numQuestionsSeen = 0;
  return self;
}
- (BOOL) hasNumQuestionsAnsweredCorrectly {
  return result.hasNumQuestionsAnsweredCorrectly;
}
- (int32_t) numQuestionsAnsweredCorrectly {
  return result.numQuestionsAnsweredCorrectly;
}
- (BasicRoundResultsProto_Builder*) setNumQuestionsAnsweredCorrectly:(int32_t) value {
  result.hasNumQuestionsAnsweredCorrectly = YES;
  result.numQuestionsAnsweredCorrectly = value;
  return self;
}
- (BasicRoundResultsProto_Builder*) clearNumQuestionsAnsweredCorrectly {
  result.hasNumQuestionsAnsweredCorrectly = NO;
  result.numQuestionsAnsweredCorrectly = 0;
  return self;
}
- (BOOL) hasScore {
  return result.hasScore;
}
- (int32_t) score {
  return result.score;
}
- (BasicRoundResultsProto_Builder*) setScore:(int32_t) value {
  result.hasScore = YES;
  result.score = value;
  return self;
}
- (BasicRoundResultsProto_Builder*) clearScore {
  result.hasScore = NO;
  result.score = 0;
  return self;
}
- (BOOL) hasRoundNumber {
  return result.hasRoundNumber;
}
- (int32_t) roundNumber {
  return result.roundNumber;
}
- (BasicRoundResultsProto_Builder*) setRoundNumber:(int32_t) value {
  result.hasRoundNumber = YES;
  result.roundNumber = value;
  return self;
}
- (BasicRoundResultsProto_Builder*) clearRoundNumber {
  result.hasRoundNumber = NO;
  result.roundNumber = 0;
  return self;
}
@end

@interface CompleteRoundResultsProto ()
@property (retain) NSString* id;
@property int32_t numQuestionsSeen;
@property int32_t numQuestionsAnsweredCorrectly;
@property int32_t score;
@property int32_t roundNumber;
@property (retain) NSMutableArray* mutableQuestionsList;
@property int64_t startTime;
@property int64_t endTime;
@end

@implementation CompleteRoundResultsProto

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasNumQuestionsSeen {
  return !!hasNumQuestionsSeen_;
}
- (void) setHasNumQuestionsSeen:(BOOL) value {
  hasNumQuestionsSeen_ = !!value;
}
@synthesize numQuestionsSeen;
- (BOOL) hasNumQuestionsAnsweredCorrectly {
  return !!hasNumQuestionsAnsweredCorrectly_;
}
- (void) setHasNumQuestionsAnsweredCorrectly:(BOOL) value {
  hasNumQuestionsAnsweredCorrectly_ = !!value;
}
@synthesize numQuestionsAnsweredCorrectly;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) value {
  hasScore_ = !!value;
}
@synthesize score;
- (BOOL) hasRoundNumber {
  return !!hasRoundNumber_;
}
- (void) setHasRoundNumber:(BOOL) value {
  hasRoundNumber_ = !!value;
}
@synthesize roundNumber;
@synthesize mutableQuestionsList;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) value {
  hasStartTime_ = !!value;
}
@synthesize startTime;
- (BOOL) hasEndTime {
  return !!hasEndTime_;
}
- (void) setHasEndTime:(BOOL) value {
  hasEndTime_ = !!value;
}
@synthesize endTime;
- (void) dealloc {
  self.id = nil;
  self.mutableQuestionsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.numQuestionsSeen = 0;
    self.numQuestionsAnsweredCorrectly = 0;
    self.score = 0;
    self.roundNumber = 0;
    self.startTime = 0L;
    self.endTime = 0L;
  }
  return self;
}
static CompleteRoundResultsProto* defaultCompleteRoundResultsProtoInstance = nil;
+ (void) initialize {
  if (self == [CompleteRoundResultsProto class]) {
    defaultCompleteRoundResultsProtoInstance = [[CompleteRoundResultsProto alloc] init];
  }
}
+ (CompleteRoundResultsProto*) defaultInstance {
  return defaultCompleteRoundResultsProtoInstance;
}
- (CompleteRoundResultsProto*) defaultInstance {
  return defaultCompleteRoundResultsProtoInstance;
}
- (NSArray*) questionsList {
  return mutableQuestionsList;
}
- (QuestionProto*) questionsAtIndex:(int32_t) index {
  id value = [mutableQuestionsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNumQuestionsSeen) {
    [output writeInt32:1 value:self.numQuestionsSeen];
  }
  if (self.hasNumQuestionsAnsweredCorrectly) {
    [output writeInt32:2 value:self.numQuestionsAnsweredCorrectly];
  }
  if (self.hasScore) {
    [output writeInt32:3 value:self.score];
  }
  if (self.hasRoundNumber) {
    [output writeInt32:4 value:self.roundNumber];
  }
  for (QuestionProto* element in self.questionsList) {
    [output writeMessage:5 value:element];
  }
  if (self.hasId) {
    [output writeString:6 value:self.id];
  }
  if (self.hasStartTime) {
    [output writeInt64:7 value:self.startTime];
  }
  if (self.hasEndTime) {
    [output writeInt64:8 value:self.endTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNumQuestionsSeen) {
    size += computeInt32Size(1, self.numQuestionsSeen);
  }
  if (self.hasNumQuestionsAnsweredCorrectly) {
    size += computeInt32Size(2, self.numQuestionsAnsweredCorrectly);
  }
  if (self.hasScore) {
    size += computeInt32Size(3, self.score);
  }
  if (self.hasRoundNumber) {
    size += computeInt32Size(4, self.roundNumber);
  }
  for (QuestionProto* element in self.questionsList) {
    size += computeMessageSize(5, element);
  }
  if (self.hasId) {
    size += computeStringSize(6, self.id);
  }
  if (self.hasStartTime) {
    size += computeInt64Size(7, self.startTime);
  }
  if (self.hasEndTime) {
    size += computeInt64Size(8, self.endTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CompleteRoundResultsProto*) parseFromData:(NSData*) data {
  return (CompleteRoundResultsProto*)[[[CompleteRoundResultsProto builder] mergeFromData:data] build];
}
+ (CompleteRoundResultsProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompleteRoundResultsProto*)[[[CompleteRoundResultsProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompleteRoundResultsProto*) parseFromInputStream:(NSInputStream*) input {
  return (CompleteRoundResultsProto*)[[[CompleteRoundResultsProto builder] mergeFromInputStream:input] build];
}
+ (CompleteRoundResultsProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompleteRoundResultsProto*)[[[CompleteRoundResultsProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompleteRoundResultsProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompleteRoundResultsProto*)[[[CompleteRoundResultsProto builder] mergeFromCodedInputStream:input] build];
}
+ (CompleteRoundResultsProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompleteRoundResultsProto*)[[[CompleteRoundResultsProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompleteRoundResultsProto_Builder*) builder {
  return [[[CompleteRoundResultsProto_Builder alloc] init] autorelease];
}
+ (CompleteRoundResultsProto_Builder*) builderWithPrototype:(CompleteRoundResultsProto*) prototype {
  return [[CompleteRoundResultsProto builder] mergeFrom:prototype];
}
- (CompleteRoundResultsProto_Builder*) builder {
  return [CompleteRoundResultsProto builder];
}
@end

@interface CompleteRoundResultsProto_Builder()
@property (retain) CompleteRoundResultsProto* result;
@end

@implementation CompleteRoundResultsProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CompleteRoundResultsProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CompleteRoundResultsProto_Builder*) clear {
  self.result = [[[CompleteRoundResultsProto alloc] init] autorelease];
  return self;
}
- (CompleteRoundResultsProto_Builder*) clone {
  return [CompleteRoundResultsProto builderWithPrototype:result];
}
- (CompleteRoundResultsProto*) defaultInstance {
  return [CompleteRoundResultsProto defaultInstance];
}
- (CompleteRoundResultsProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompleteRoundResultsProto*) buildPartial {
  CompleteRoundResultsProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CompleteRoundResultsProto_Builder*) mergeFrom:(CompleteRoundResultsProto*) other {
  if (other == [CompleteRoundResultsProto defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasNumQuestionsSeen) {
    [self setNumQuestionsSeen:other.numQuestionsSeen];
  }
  if (other.hasNumQuestionsAnsweredCorrectly) {
    [self setNumQuestionsAnsweredCorrectly:other.numQuestionsAnsweredCorrectly];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasRoundNumber) {
    [self setRoundNumber:other.roundNumber];
  }
  if (other.mutableQuestionsList.count > 0) {
    if (result.mutableQuestionsList == nil) {
      result.mutableQuestionsList = [NSMutableArray array];
    }
    [result.mutableQuestionsList addObjectsFromArray:other.mutableQuestionsList];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasEndTime) {
    [self setEndTime:other.endTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompleteRoundResultsProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompleteRoundResultsProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNumQuestionsSeen:[input readInt32]];
        break;
      }
      case 16: {
        [self setNumQuestionsAnsweredCorrectly:[input readInt32]];
        break;
      }
      case 24: {
        [self setScore:[input readInt32]];
        break;
      }
      case 32: {
        [self setRoundNumber:[input readInt32]];
        break;
      }
      case 42: {
        QuestionProto_Builder* subBuilder = [QuestionProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQuestions:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setId:[input readString]];
        break;
      }
      case 56: {
        [self setStartTime:[input readInt64]];
        break;
      }
      case 64: {
        [self setEndTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (CompleteRoundResultsProto_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (CompleteRoundResultsProto_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasNumQuestionsSeen {
  return result.hasNumQuestionsSeen;
}
- (int32_t) numQuestionsSeen {
  return result.numQuestionsSeen;
}
- (CompleteRoundResultsProto_Builder*) setNumQuestionsSeen:(int32_t) value {
  result.hasNumQuestionsSeen = YES;
  result.numQuestionsSeen = value;
  return self;
}
- (CompleteRoundResultsProto_Builder*) clearNumQuestionsSeen {
  result.hasNumQuestionsSeen = NO;
  result.numQuestionsSeen = 0;
  return self;
}
- (BOOL) hasNumQuestionsAnsweredCorrectly {
  return result.hasNumQuestionsAnsweredCorrectly;
}
- (int32_t) numQuestionsAnsweredCorrectly {
  return result.numQuestionsAnsweredCorrectly;
}
- (CompleteRoundResultsProto_Builder*) setNumQuestionsAnsweredCorrectly:(int32_t) value {
  result.hasNumQuestionsAnsweredCorrectly = YES;
  result.numQuestionsAnsweredCorrectly = value;
  return self;
}
- (CompleteRoundResultsProto_Builder*) clearNumQuestionsAnsweredCorrectly {
  result.hasNumQuestionsAnsweredCorrectly = NO;
  result.numQuestionsAnsweredCorrectly = 0;
  return self;
}
- (BOOL) hasScore {
  return result.hasScore;
}
- (int32_t) score {
  return result.score;
}
- (CompleteRoundResultsProto_Builder*) setScore:(int32_t) value {
  result.hasScore = YES;
  result.score = value;
  return self;
}
- (CompleteRoundResultsProto_Builder*) clearScore {
  result.hasScore = NO;
  result.score = 0;
  return self;
}
- (BOOL) hasRoundNumber {
  return result.hasRoundNumber;
}
- (int32_t) roundNumber {
  return result.roundNumber;
}
- (CompleteRoundResultsProto_Builder*) setRoundNumber:(int32_t) value {
  result.hasRoundNumber = YES;
  result.roundNumber = value;
  return self;
}
- (CompleteRoundResultsProto_Builder*) clearRoundNumber {
  result.hasRoundNumber = NO;
  result.roundNumber = 0;
  return self;
}
- (NSArray*) questionsList {
  if (result.mutableQuestionsList == nil) { return [NSArray array]; }
  return result.mutableQuestionsList;
}
- (QuestionProto*) questionsAtIndex:(int32_t) index {
  return [result questionsAtIndex:index];
}
- (CompleteRoundResultsProto_Builder*) replaceQuestionsAtIndex:(int32_t) index with:(QuestionProto*) value {
  [result.mutableQuestionsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (CompleteRoundResultsProto_Builder*) addAllQuestions:(NSArray*) values {
  if (result.mutableQuestionsList == nil) {
    result.mutableQuestionsList = [NSMutableArray array];
  }
  [result.mutableQuestionsList addObjectsFromArray:values];
  return self;
}
- (CompleteRoundResultsProto_Builder*) clearQuestionsList {
  result.mutableQuestionsList = nil;
  return self;
}
- (CompleteRoundResultsProto_Builder*) addQuestions:(QuestionProto*) value {
  if (result.mutableQuestionsList == nil) {
    result.mutableQuestionsList = [NSMutableArray array];
  }
  [result.mutableQuestionsList addObject:value];
  return self;
}
- (BOOL) hasStartTime {
  return result.hasStartTime;
}
- (int64_t) startTime {
  return result.startTime;
}
- (CompleteRoundResultsProto_Builder*) setStartTime:(int64_t) value {
  result.hasStartTime = YES;
  result.startTime = value;
  return self;
}
- (CompleteRoundResultsProto_Builder*) clearStartTime {
  result.hasStartTime = NO;
  result.startTime = 0L;
  return self;
}
- (BOOL) hasEndTime {
  return result.hasEndTime;
}
- (int64_t) endTime {
  return result.endTime;
}
- (CompleteRoundResultsProto_Builder*) setEndTime:(int64_t) value {
  result.hasEndTime = YES;
  result.endTime = value;
  return self;
}
- (CompleteRoundResultsProto_Builder*) clearEndTime {
  result.hasEndTime = NO;
  result.endTime = 0L;
  return self;
}
@end

@interface BasicRoundProto ()
@property (retain) NSString* id;
@property (retain) NSMutableArray* mutableQuestionsList;
@property int32_t roundNumber;
@end

@implementation BasicRoundProto

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
@synthesize mutableQuestionsList;
- (BOOL) hasRoundNumber {
  return !!hasRoundNumber_;
}
- (void) setHasRoundNumber:(BOOL) value {
  hasRoundNumber_ = !!value;
}
@synthesize roundNumber;
- (void) dealloc {
  self.id = nil;
  self.mutableQuestionsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.roundNumber = 0;
  }
  return self;
}
static BasicRoundProto* defaultBasicRoundProtoInstance = nil;
+ (void) initialize {
  if (self == [BasicRoundProto class]) {
    defaultBasicRoundProtoInstance = [[BasicRoundProto alloc] init];
  }
}
+ (BasicRoundProto*) defaultInstance {
  return defaultBasicRoundProtoInstance;
}
- (BasicRoundProto*) defaultInstance {
  return defaultBasicRoundProtoInstance;
}
- (NSArray*) questionsList {
  return mutableQuestionsList;
}
- (QuestionProto*) questionsAtIndex:(int32_t) index {
  id value = [mutableQuestionsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  for (QuestionProto* element in self.questionsList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasRoundNumber) {
    [output writeInt32:3 value:self.roundNumber];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  for (QuestionProto* element in self.questionsList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasRoundNumber) {
    size += computeInt32Size(3, self.roundNumber);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BasicRoundProto*) parseFromData:(NSData*) data {
  return (BasicRoundProto*)[[[BasicRoundProto builder] mergeFromData:data] build];
}
+ (BasicRoundProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasicRoundProto*)[[[BasicRoundProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BasicRoundProto*) parseFromInputStream:(NSInputStream*) input {
  return (BasicRoundProto*)[[[BasicRoundProto builder] mergeFromInputStream:input] build];
}
+ (BasicRoundProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasicRoundProto*)[[[BasicRoundProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasicRoundProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BasicRoundProto*)[[[BasicRoundProto builder] mergeFromCodedInputStream:input] build];
}
+ (BasicRoundProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasicRoundProto*)[[[BasicRoundProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasicRoundProto_Builder*) builder {
  return [[[BasicRoundProto_Builder alloc] init] autorelease];
}
+ (BasicRoundProto_Builder*) builderWithPrototype:(BasicRoundProto*) prototype {
  return [[BasicRoundProto builder] mergeFrom:prototype];
}
- (BasicRoundProto_Builder*) builder {
  return [BasicRoundProto builder];
}
@end

@interface BasicRoundProto_Builder()
@property (retain) BasicRoundProto* result;
@end

@implementation BasicRoundProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BasicRoundProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BasicRoundProto_Builder*) clear {
  self.result = [[[BasicRoundProto alloc] init] autorelease];
  return self;
}
- (BasicRoundProto_Builder*) clone {
  return [BasicRoundProto builderWithPrototype:result];
}
- (BasicRoundProto*) defaultInstance {
  return [BasicRoundProto defaultInstance];
}
- (BasicRoundProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BasicRoundProto*) buildPartial {
  BasicRoundProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BasicRoundProto_Builder*) mergeFrom:(BasicRoundProto*) other {
  if (other == [BasicRoundProto defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.mutableQuestionsList.count > 0) {
    if (result.mutableQuestionsList == nil) {
      result.mutableQuestionsList = [NSMutableArray array];
    }
    [result.mutableQuestionsList addObjectsFromArray:other.mutableQuestionsList];
  }
  if (other.hasRoundNumber) {
    [self setRoundNumber:other.roundNumber];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BasicRoundProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BasicRoundProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        QuestionProto_Builder* subBuilder = [QuestionProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQuestions:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setRoundNumber:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (BasicRoundProto_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (BasicRoundProto_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (NSArray*) questionsList {
  if (result.mutableQuestionsList == nil) { return [NSArray array]; }
  return result.mutableQuestionsList;
}
- (QuestionProto*) questionsAtIndex:(int32_t) index {
  return [result questionsAtIndex:index];
}
- (BasicRoundProto_Builder*) replaceQuestionsAtIndex:(int32_t) index with:(QuestionProto*) value {
  [result.mutableQuestionsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (BasicRoundProto_Builder*) addAllQuestions:(NSArray*) values {
  if (result.mutableQuestionsList == nil) {
    result.mutableQuestionsList = [NSMutableArray array];
  }
  [result.mutableQuestionsList addObjectsFromArray:values];
  return self;
}
- (BasicRoundProto_Builder*) clearQuestionsList {
  result.mutableQuestionsList = nil;
  return self;
}
- (BasicRoundProto_Builder*) addQuestions:(QuestionProto*) value {
  if (result.mutableQuestionsList == nil) {
    result.mutableQuestionsList = [NSMutableArray array];
  }
  [result.mutableQuestionsList addObject:value];
  return self;
}
- (BOOL) hasRoundNumber {
  return result.hasRoundNumber;
}
- (int32_t) roundNumber {
  return result.roundNumber;
}
- (BasicRoundProto_Builder*) setRoundNumber:(int32_t) value {
  result.hasRoundNumber = YES;
  result.roundNumber = value;
  return self;
}
- (BasicRoundProto_Builder*) clearRoundNumber {
  result.hasRoundNumber = NO;
  result.roundNumber = 0;
  return self;
}
@end

