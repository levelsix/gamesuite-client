// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "StartRoundEvent.pb.h"

@implementation StartRoundEventRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [StartRoundEventRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [TriviaQuestionFormatRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface StartRoundRequestProto ()
@property (retain) BasicUserProto* sender;
@property BOOL isRandomPlayer;
@property (retain) NSString* opponent;
@property (retain) NSString* gameId;
@property int32_t roundNumber;
@property BOOL isPlayerOne;
@property int64_t startTime;
@property (retain) NSMutableArray* mutableQuestionsList;
@end

@implementation StartRoundRequestProto

- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value {
  hasSender_ = !!value;
}
@synthesize sender;
- (BOOL) hasIsRandomPlayer {
  return !!hasIsRandomPlayer_;
}
- (void) setHasIsRandomPlayer:(BOOL) value {
  hasIsRandomPlayer_ = !!value;
}
- (BOOL) isRandomPlayer {
  return !!isRandomPlayer_;
}
- (void) setIsRandomPlayer:(BOOL) value {
  isRandomPlayer_ = !!value;
}
- (BOOL) hasOpponent {
  return !!hasOpponent_;
}
- (void) setHasOpponent:(BOOL) value {
  hasOpponent_ = !!value;
}
@synthesize opponent;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasRoundNumber {
  return !!hasRoundNumber_;
}
- (void) setHasRoundNumber:(BOOL) value {
  hasRoundNumber_ = !!value;
}
@synthesize roundNumber;
- (BOOL) hasIsPlayerOne {
  return !!hasIsPlayerOne_;
}
- (void) setHasIsPlayerOne:(BOOL) value {
  hasIsPlayerOne_ = !!value;
}
- (BOOL) isPlayerOne {
  return !!isPlayerOne_;
}
- (void) setIsPlayerOne:(BOOL) value {
  isPlayerOne_ = !!value;
}
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) value {
  hasStartTime_ = !!value;
}
@synthesize startTime;
@synthesize mutableQuestionsList;
- (void) dealloc {
  self.sender = nil;
  self.opponent = nil;
  self.gameId = nil;
  self.mutableQuestionsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sender = [BasicUserProto defaultInstance];
    self.isRandomPlayer = NO;
    self.opponent = @"";
    self.gameId = @"";
    self.roundNumber = 0;
    self.isPlayerOne = NO;
    self.startTime = 0L;
  }
  return self;
}
static StartRoundRequestProto* defaultStartRoundRequestProtoInstance = nil;
+ (void) initialize {
  if (self == [StartRoundRequestProto class]) {
    defaultStartRoundRequestProtoInstance = [[StartRoundRequestProto alloc] init];
  }
}
+ (StartRoundRequestProto*) defaultInstance {
  return defaultStartRoundRequestProtoInstance;
}
- (StartRoundRequestProto*) defaultInstance {
  return defaultStartRoundRequestProtoInstance;
}
- (NSArray*) questionsList {
  return mutableQuestionsList;
}
- (QuestionProto*) questionsAtIndex:(int32_t) index {
  id value = [mutableQuestionsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSender) {
    [output writeMessage:1 value:self.sender];
  }
  if (self.hasIsRandomPlayer) {
    [output writeBool:2 value:self.isRandomPlayer];
  }
  if (self.hasOpponent) {
    [output writeString:3 value:self.opponent];
  }
  if (self.hasGameId) {
    [output writeString:4 value:self.gameId];
  }
  if (self.hasRoundNumber) {
    [output writeInt32:5 value:self.roundNumber];
  }
  if (self.hasIsPlayerOne) {
    [output writeBool:6 value:self.isPlayerOne];
  }
  if (self.hasStartTime) {
    [output writeInt64:7 value:self.startTime];
  }
  for (QuestionProto* element in self.questionsList) {
    [output writeMessage:8 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSender) {
    size += computeMessageSize(1, self.sender);
  }
  if (self.hasIsRandomPlayer) {
    size += computeBoolSize(2, self.isRandomPlayer);
  }
  if (self.hasOpponent) {
    size += computeStringSize(3, self.opponent);
  }
  if (self.hasGameId) {
    size += computeStringSize(4, self.gameId);
  }
  if (self.hasRoundNumber) {
    size += computeInt32Size(5, self.roundNumber);
  }
  if (self.hasIsPlayerOne) {
    size += computeBoolSize(6, self.isPlayerOne);
  }
  if (self.hasStartTime) {
    size += computeInt64Size(7, self.startTime);
  }
  for (QuestionProto* element in self.questionsList) {
    size += computeMessageSize(8, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StartRoundRequestProto*) parseFromData:(NSData*) data {
  return (StartRoundRequestProto*)[[[StartRoundRequestProto builder] mergeFromData:data] build];
}
+ (StartRoundRequestProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartRoundRequestProto*)[[[StartRoundRequestProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartRoundRequestProto*) parseFromInputStream:(NSInputStream*) input {
  return (StartRoundRequestProto*)[[[StartRoundRequestProto builder] mergeFromInputStream:input] build];
}
+ (StartRoundRequestProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartRoundRequestProto*)[[[StartRoundRequestProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartRoundRequestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartRoundRequestProto*)[[[StartRoundRequestProto builder] mergeFromCodedInputStream:input] build];
}
+ (StartRoundRequestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartRoundRequestProto*)[[[StartRoundRequestProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartRoundRequestProto_Builder*) builder {
  return [[[StartRoundRequestProto_Builder alloc] init] autorelease];
}
+ (StartRoundRequestProto_Builder*) builderWithPrototype:(StartRoundRequestProto*) prototype {
  return [[StartRoundRequestProto builder] mergeFrom:prototype];
}
- (StartRoundRequestProto_Builder*) builder {
  return [StartRoundRequestProto builder];
}
@end

@interface StartRoundRequestProto_Builder()
@property (retain) StartRoundRequestProto* result;
@end

@implementation StartRoundRequestProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StartRoundRequestProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StartRoundRequestProto_Builder*) clear {
  self.result = [[[StartRoundRequestProto alloc] init] autorelease];
  return self;
}
- (StartRoundRequestProto_Builder*) clone {
  return [StartRoundRequestProto builderWithPrototype:result];
}
- (StartRoundRequestProto*) defaultInstance {
  return [StartRoundRequestProto defaultInstance];
}
- (StartRoundRequestProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartRoundRequestProto*) buildPartial {
  StartRoundRequestProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StartRoundRequestProto_Builder*) mergeFrom:(StartRoundRequestProto*) other {
  if (other == [StartRoundRequestProto defaultInstance]) {
    return self;
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.hasIsRandomPlayer) {
    [self setIsRandomPlayer:other.isRandomPlayer];
  }
  if (other.hasOpponent) {
    [self setOpponent:other.opponent];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasRoundNumber) {
    [self setRoundNumber:other.roundNumber];
  }
  if (other.hasIsPlayerOne) {
    [self setIsPlayerOne:other.isPlayerOne];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.mutableQuestionsList.count > 0) {
    if (result.mutableQuestionsList == nil) {
      result.mutableQuestionsList = [NSMutableArray array];
    }
    [result.mutableQuestionsList addObjectsFromArray:other.mutableQuestionsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartRoundRequestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartRoundRequestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BasicUserProto_Builder* subBuilder = [BasicUserProto builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setIsRandomPlayer:[input readBool]];
        break;
      }
      case 26: {
        [self setOpponent:[input readString]];
        break;
      }
      case 34: {
        [self setGameId:[input readString]];
        break;
      }
      case 40: {
        [self setRoundNumber:[input readInt32]];
        break;
      }
      case 48: {
        [self setIsPlayerOne:[input readBool]];
        break;
      }
      case 56: {
        [self setStartTime:[input readInt64]];
        break;
      }
      case 66: {
        QuestionProto_Builder* subBuilder = [QuestionProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQuestions:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (BasicUserProto*) sender {
  return result.sender;
}
- (StartRoundRequestProto_Builder*) setSender:(BasicUserProto*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (StartRoundRequestProto_Builder*) setSenderBuilder:(BasicUserProto_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (StartRoundRequestProto_Builder*) mergeSender:(BasicUserProto*) value {
  if (result.hasSender &&
      result.sender != [BasicUserProto defaultInstance]) {
    result.sender =
      [[[BasicUserProto builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (StartRoundRequestProto_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [BasicUserProto defaultInstance];
  return self;
}
- (BOOL) hasIsRandomPlayer {
  return result.hasIsRandomPlayer;
}
- (BOOL) isRandomPlayer {
  return result.isRandomPlayer;
}
- (StartRoundRequestProto_Builder*) setIsRandomPlayer:(BOOL) value {
  result.hasIsRandomPlayer = YES;
  result.isRandomPlayer = value;
  return self;
}
- (StartRoundRequestProto_Builder*) clearIsRandomPlayer {
  result.hasIsRandomPlayer = NO;
  result.isRandomPlayer = NO;
  return self;
}
- (BOOL) hasOpponent {
  return result.hasOpponent;
}
- (NSString*) opponent {
  return result.opponent;
}
- (StartRoundRequestProto_Builder*) setOpponent:(NSString*) value {
  result.hasOpponent = YES;
  result.opponent = value;
  return self;
}
- (StartRoundRequestProto_Builder*) clearOpponent {
  result.hasOpponent = NO;
  result.opponent = @"";
  return self;
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (StartRoundRequestProto_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (StartRoundRequestProto_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasRoundNumber {
  return result.hasRoundNumber;
}
- (int32_t) roundNumber {
  return result.roundNumber;
}
- (StartRoundRequestProto_Builder*) setRoundNumber:(int32_t) value {
  result.hasRoundNumber = YES;
  result.roundNumber = value;
  return self;
}
- (StartRoundRequestProto_Builder*) clearRoundNumber {
  result.hasRoundNumber = NO;
  result.roundNumber = 0;
  return self;
}
- (BOOL) hasIsPlayerOne {
  return result.hasIsPlayerOne;
}
- (BOOL) isPlayerOne {
  return result.isPlayerOne;
}
- (StartRoundRequestProto_Builder*) setIsPlayerOne:(BOOL) value {
  result.hasIsPlayerOne = YES;
  result.isPlayerOne = value;
  return self;
}
- (StartRoundRequestProto_Builder*) clearIsPlayerOne {
  result.hasIsPlayerOne = NO;
  result.isPlayerOne = NO;
  return self;
}
- (BOOL) hasStartTime {
  return result.hasStartTime;
}
- (int64_t) startTime {
  return result.startTime;
}
- (StartRoundRequestProto_Builder*) setStartTime:(int64_t) value {
  result.hasStartTime = YES;
  result.startTime = value;
  return self;
}
- (StartRoundRequestProto_Builder*) clearStartTime {
  result.hasStartTime = NO;
  result.startTime = 0L;
  return self;
}
- (NSArray*) questionsList {
  if (result.mutableQuestionsList == nil) { return [NSArray array]; }
  return result.mutableQuestionsList;
}
- (QuestionProto*) questionsAtIndex:(int32_t) index {
  return [result questionsAtIndex:index];
}
- (StartRoundRequestProto_Builder*) replaceQuestionsAtIndex:(int32_t) index with:(QuestionProto*) value {
  [result.mutableQuestionsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StartRoundRequestProto_Builder*) addAllQuestions:(NSArray*) values {
  if (result.mutableQuestionsList == nil) {
    result.mutableQuestionsList = [NSMutableArray array];
  }
  [result.mutableQuestionsList addObjectsFromArray:values];
  return self;
}
- (StartRoundRequestProto_Builder*) clearQuestionsList {
  result.mutableQuestionsList = nil;
  return self;
}
- (StartRoundRequestProto_Builder*) addQuestions:(QuestionProto*) value {
  if (result.mutableQuestionsList == nil) {
    result.mutableQuestionsList = [NSMutableArray array];
  }
  [result.mutableQuestionsList addObject:value];
  return self;
}
@end

@interface StartRoundResponseProto ()
@property (retain) BasicUserProto* recipient;
@property (retain) NSString* gameId;
@property StartRoundResponseProto_StartRoundStatus status;
@property (retain) CompleteUserProto* updatedRecipient;
@end

@implementation StartRoundResponseProto

- (BOOL) hasRecipient {
  return !!hasRecipient_;
}
- (void) setHasRecipient:(BOOL) value {
  hasRecipient_ = !!value;
}
@synthesize recipient;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value {
  hasGameId_ = !!value;
}
@synthesize gameId;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasUpdatedRecipient {
  return !!hasUpdatedRecipient_;
}
- (void) setHasUpdatedRecipient:(BOOL) value {
  hasUpdatedRecipient_ = !!value;
}
@synthesize updatedRecipient;
- (void) dealloc {
  self.recipient = nil;
  self.gameId = nil;
  self.updatedRecipient = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.recipient = [BasicUserProto defaultInstance];
    self.gameId = @"";
    self.status = StartRoundResponseProto_StartRoundStatusSuccess;
    self.updatedRecipient = [CompleteUserProto defaultInstance];
  }
  return self;
}
static StartRoundResponseProto* defaultStartRoundResponseProtoInstance = nil;
+ (void) initialize {
  if (self == [StartRoundResponseProto class]) {
    defaultStartRoundResponseProtoInstance = [[StartRoundResponseProto alloc] init];
  }
}
+ (StartRoundResponseProto*) defaultInstance {
  return defaultStartRoundResponseProtoInstance;
}
- (StartRoundResponseProto*) defaultInstance {
  return defaultStartRoundResponseProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRecipient) {
    [output writeMessage:1 value:self.recipient];
  }
  if (self.hasGameId) {
    [output writeString:2 value:self.gameId];
  }
  if (self.hasStatus) {
    [output writeEnum:3 value:self.status];
  }
  if (self.hasUpdatedRecipient) {
    [output writeMessage:4 value:self.updatedRecipient];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRecipient) {
    size += computeMessageSize(1, self.recipient);
  }
  if (self.hasGameId) {
    size += computeStringSize(2, self.gameId);
  }
  if (self.hasStatus) {
    size += computeEnumSize(3, self.status);
  }
  if (self.hasUpdatedRecipient) {
    size += computeMessageSize(4, self.updatedRecipient);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StartRoundResponseProto*) parseFromData:(NSData*) data {
  return (StartRoundResponseProto*)[[[StartRoundResponseProto builder] mergeFromData:data] build];
}
+ (StartRoundResponseProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartRoundResponseProto*)[[[StartRoundResponseProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StartRoundResponseProto*) parseFromInputStream:(NSInputStream*) input {
  return (StartRoundResponseProto*)[[[StartRoundResponseProto builder] mergeFromInputStream:input] build];
}
+ (StartRoundResponseProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartRoundResponseProto*)[[[StartRoundResponseProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartRoundResponseProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StartRoundResponseProto*)[[[StartRoundResponseProto builder] mergeFromCodedInputStream:input] build];
}
+ (StartRoundResponseProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StartRoundResponseProto*)[[[StartRoundResponseProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StartRoundResponseProto_Builder*) builder {
  return [[[StartRoundResponseProto_Builder alloc] init] autorelease];
}
+ (StartRoundResponseProto_Builder*) builderWithPrototype:(StartRoundResponseProto*) prototype {
  return [[StartRoundResponseProto builder] mergeFrom:prototype];
}
- (StartRoundResponseProto_Builder*) builder {
  return [StartRoundResponseProto builder];
}
@end

BOOL StartRoundResponseProto_StartRoundStatusIsValidValue(StartRoundResponseProto_StartRoundStatus value) {
  switch (value) {
    case StartRoundResponseProto_StartRoundStatusSuccess:
    case StartRoundResponseProto_StartRoundStatusFailClientTooApartFromServerTime:
    case StartRoundResponseProto_StartRoundStatusFailOther:
    case StartRoundResponseProto_StartRoundStatusFailNotEnoughTokens:
    case StartRoundResponseProto_StartRoundStatusFailGameEnded:
    case StartRoundResponseProto_StartRoundStatusFailNotUserTurn:
    case StartRoundResponseProto_StartRoundStatusFailWrongOpponents:
    case StartRoundResponseProto_StartRoundStatusFailWrongRoundNumber:
      return YES;
    default:
      return NO;
  }
}
@interface StartRoundResponseProto_Builder()
@property (retain) StartRoundResponseProto* result;
@end

@implementation StartRoundResponseProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StartRoundResponseProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StartRoundResponseProto_Builder*) clear {
  self.result = [[[StartRoundResponseProto alloc] init] autorelease];
  return self;
}
- (StartRoundResponseProto_Builder*) clone {
  return [StartRoundResponseProto builderWithPrototype:result];
}
- (StartRoundResponseProto*) defaultInstance {
  return [StartRoundResponseProto defaultInstance];
}
- (StartRoundResponseProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StartRoundResponseProto*) buildPartial {
  StartRoundResponseProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StartRoundResponseProto_Builder*) mergeFrom:(StartRoundResponseProto*) other {
  if (other == [StartRoundResponseProto defaultInstance]) {
    return self;
  }
  if (other.hasRecipient) {
    [self mergeRecipient:other.recipient];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasUpdatedRecipient) {
    [self mergeUpdatedRecipient:other.updatedRecipient];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StartRoundResponseProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StartRoundResponseProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BasicUserProto_Builder* subBuilder = [BasicUserProto builder];
        if (self.hasRecipient) {
          [subBuilder mergeFrom:self.recipient];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRecipient:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setGameId:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (StartRoundResponseProto_StartRoundStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        CompleteUserProto_Builder* subBuilder = [CompleteUserProto builder];
        if (self.hasUpdatedRecipient) {
          [subBuilder mergeFrom:self.updatedRecipient];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUpdatedRecipient:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRecipient {
  return result.hasRecipient;
}
- (BasicUserProto*) recipient {
  return result.recipient;
}
- (StartRoundResponseProto_Builder*) setRecipient:(BasicUserProto*) value {
  result.hasRecipient = YES;
  result.recipient = value;
  return self;
}
- (StartRoundResponseProto_Builder*) setRecipientBuilder:(BasicUserProto_Builder*) builderForValue {
  return [self setRecipient:[builderForValue build]];
}
- (StartRoundResponseProto_Builder*) mergeRecipient:(BasicUserProto*) value {
  if (result.hasRecipient &&
      result.recipient != [BasicUserProto defaultInstance]) {
    result.recipient =
      [[[BasicUserProto builderWithPrototype:result.recipient] mergeFrom:value] buildPartial];
  } else {
    result.recipient = value;
  }
  result.hasRecipient = YES;
  return self;
}
- (StartRoundResponseProto_Builder*) clearRecipient {
  result.hasRecipient = NO;
  result.recipient = [BasicUserProto defaultInstance];
  return self;
}
- (BOOL) hasGameId {
  return result.hasGameId;
}
- (NSString*) gameId {
  return result.gameId;
}
- (StartRoundResponseProto_Builder*) setGameId:(NSString*) value {
  result.hasGameId = YES;
  result.gameId = value;
  return self;
}
- (StartRoundResponseProto_Builder*) clearGameId {
  result.hasGameId = NO;
  result.gameId = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (StartRoundResponseProto_StartRoundStatus) status {
  return result.status;
}
- (StartRoundResponseProto_Builder*) setStatus:(StartRoundResponseProto_StartRoundStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (StartRoundResponseProto_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = StartRoundResponseProto_StartRoundStatusSuccess;
  return self;
}
- (BOOL) hasUpdatedRecipient {
  return result.hasUpdatedRecipient;
}
- (CompleteUserProto*) updatedRecipient {
  return result.updatedRecipient;
}
- (StartRoundResponseProto_Builder*) setUpdatedRecipient:(CompleteUserProto*) value {
  result.hasUpdatedRecipient = YES;
  result.updatedRecipient = value;
  return self;
}
- (StartRoundResponseProto_Builder*) setUpdatedRecipientBuilder:(CompleteUserProto_Builder*) builderForValue {
  return [self setUpdatedRecipient:[builderForValue build]];
}
- (StartRoundResponseProto_Builder*) mergeUpdatedRecipient:(CompleteUserProto*) value {
  if (result.hasUpdatedRecipient &&
      result.updatedRecipient != [CompleteUserProto defaultInstance]) {
    result.updatedRecipient =
      [[[CompleteUserProto builderWithPrototype:result.updatedRecipient] mergeFrom:value] buildPartial];
  } else {
    result.updatedRecipient = value;
  }
  result.hasUpdatedRecipient = YES;
  return self;
}
- (StartRoundResponseProto_Builder*) clearUpdatedRecipient {
  result.hasUpdatedRecipient = NO;
  result.updatedRecipient = [CompleteUserProto defaultInstance];
  return self;
}
@end

